{"version":3,"sources":["components/ListaUsuarios/redux/type.js","components/ListaUsuarios/redux/action.js","components/ListaUsuarios/view/ListaUsuarios.jsx","App.js","serviceWorker.js","components/ListaUsuarios/redux/listaUsuariosReducer.js","reducer/mainReducer.js","components/ListaUsuarios/service/ListaUsuariosService.js","components/ListaUsuarios/saga/listaUsuariosSaga.js","saga/mainSaga.js","saga/index.js","index.js"],"names":["CARREGA_USUARIOS","LISTA_USUARIOS","listaUsuarios","type","payload","lista","useStyles","makeStyles","card","maxWidth","media","height","cursor","content","connect","state","stateLista","LISTA_USUARIO","dispatch","carregaLista","props","classes","useEffect","Box","p","Grid","container","direction","justify","alignItems","spacing","map","user","key","id","item","xs","sm","Card","className","CardActionArea","CardMedia","title","genre","name","image","CardContent","Typography","gutterBottom","variant","component","color","role","email","App","Boolean","window","location","hostname","match","initialStateListaUsuarios","MainReducer","combineReducers","action","ListaUsuariosService","getListaUsuarios","fetch","then","response","json","catch","erro","console","error","executarCargaListaUsuarios","watchExecutarCargaListaUsuarios","listaUsuariosSaga","service","call","put","takeEvery","all","mainSaga","sagaMiddleware","createSagaMiddleware","composedEnhancers","compose","applyMiddleware","store","createStore","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7915d532.chunk.js","sourcesContent":["//@flow\nconst MODULE_NAME = \"ListaUsuarios.\";\n\nexport const CARREGA_USUARIOS = `${MODULE_NAME}CARREGA_USUARIOS`;\nexport const LISTA_USUARIOS = `${MODULE_NAME}LISTA_USUARIOS`;","//@flow\nimport {CARREGA_USUARIOS, LISTA_USUARIOS} from \"./type\";\nimport type {User} from \"../../../shared/flowTypes/flowTypes\";\n\nexport const carregaLista = () => {\n    return {\n        type: CARREGA_USUARIOS\n    }\n};\n\nexport const listaUsuarios = (listaUsuarios: Array<User>) => {\n    return {\n        type: LISTA_USUARIOS,\n        payload: {\n            lista: listaUsuarios\n        }\n    }\n};","//@flow\nimport React, {useEffect} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport type {Store} from \"../../../shared/flowTypes/flowTypes\";\nimport {connect} from \"react-redux\";\nimport type {InitialStateListaUsuarios} from \"../redux/listaUsuariosReducer\";\nimport {carregaLista} from \"../redux/action\";\n\ntype Props = {\n    stateLista: InitialStateListaUsuarios,\n    carregaLista: () => void,\n};\n\nconst useStyles = makeStyles({\n    card: {\n        maxWidth: 400,\n    },\n    media: {\n        height: 140,\n        cursor: 'default'\n    },\n    content: {\n        cursor: 'default'\n    }\n});\n\nconst ListaUsuarios = (props: Props) => {\n\n    const {carregaLista, stateLista} = props;\n\n    const classes = useStyles();\n\n    useEffect(() => {\n        carregaLista();\n    }, [carregaLista]);\n\n    return (\n        <Box p={3}>\n            <Grid container\n                  direction=\"row\"\n                  justify=\"center\"\n                  alignItems=\"center\"\n                  spacing={1}>\n\n                {stateLista.lista.map(user => {\n                    return (<Grid key={user.id} item xs={12} sm={4}>\n                        <Card className={classes.card}>\n                            <CardActionArea>\n                                <CardMedia\n                                    className={classes.media}\n                                    title={user.genre === 'M' ? `Foto do ${user.name} ` : `Foto da ${user.name}`}\n                                    image={user.image ? user.image : 'images/image-not-found.png'}\n                                />\n                                <CardContent className={classes.content}>\n                                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                        {user.name ? user.name : \"Nome não informado\"}\n                                    </Typography>\n                                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                                        {user.role ? user.role : \"Cargo não informado\"}\n                                    </Typography>\n                                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                                        {user.email ? user.email : \"E-mail não informado\"}\n                                    </Typography>\n                                </CardContent>\n                            </CardActionArea>\n                        </Card>\n                    </Grid>)\n                })}\n\n            </Grid>\n        </Box>\n    );\n};\n\nconst mapStateToProps = (state: Store) => {\n    return {\n        stateLista: state.LISTA_USUARIO,\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        carregaLista: () => dispatch(carregaLista()),\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListaUsuarios);","import React from 'react';\nimport './App.css';\nimport ListaUsuarios from \"./components/ListaUsuarios/view/ListaUsuarios\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <ListaUsuarios/>\n        </div>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//@flow\nimport type {Action, User} from \"../../../shared/flowTypes/flowTypes\";\nimport {CARREGA_USUARIOS, LISTA_USUARIOS} from \"./type\";\n\nexport type InitialStateListaUsuarios = {\n    lista: Array<User>\n}\n\nexport const initialStateListaUsuarios: InitialStateListaUsuarios = {\n    lista: []\n};\n\ntype ListaUsuariosReducer = (state: InitialStateListaUsuarios, action: Action) => Object;\n\nexport const listaUsuariosReducer: ListaUsuariosReducer = (state = initialStateListaUsuarios, action) => {\n    switch (action.type) {\n        case LISTA_USUARIOS:\n            return {\n                ...state,\n                lista: action.payload.lista\n            };\n        case CARREGA_USUARIOS:\n            return {\n                ...state\n            };\n        default:\n            return state\n    }\n};","import {combineReducers} from 'redux';\nimport {listaUsuariosReducer} from \"../components/ListaUsuarios/redux/listaUsuariosReducer\";\n\nconst MainReducer = combineReducers({\n    LISTA_USUARIO: listaUsuariosReducer\n});\n\nexport default MainReducer;","//@flow\nexport default class ListaUsuariosService {\n    getListaUsuarios = () => {\n        return fetch('data/dados.json')\n            .then(response => response.json())\n            .then(json => json)\n            .catch(erro => {\n                console.error(erro);\n            });\n    }\n\n}","//@flow\nimport {all, call, put, takeEvery} from 'redux-saga/effects';\nimport ListaUsuariosService from \"../service/ListaUsuariosService\";\nimport {listaUsuarios} from \"../redux/action\";\nimport {CARREGA_USUARIOS} from \"../redux/type\";\n\nfunction* executarCargaListaUsuarios() {\n\n    const service = new ListaUsuariosService();\n\n    try {\n        const response = yield call(service.getListaUsuarios);\n        yield put(listaUsuarios(response));\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nfunction* watchExecutarCargaListaUsuarios() {\n    yield takeEvery(CARREGA_USUARIOS, executarCargaListaUsuarios);\n}\n\nexport function* listaUsuariosSaga(): any {\n    yield all([\n        watchExecutarCargaListaUsuarios(),\n    ]);\n}","import {all} from 'redux-saga/effects';\nimport {listaUsuariosSaga} from \"../components/ListaUsuarios/saga/listaUsuariosSaga\";\n\nexport function* mainSaga() {\n    yield all([\n        listaUsuariosSaga(),\n    ])\n}","import MainReducer from \"../reducer/mainReducer\";\nimport {applyMiddleware, createStore, compose} from 'redux';\nimport {mainSaga} from \"./mainSaga\";\nimport createSagaMiddleware from 'redux-saga';\n\nconst enhancers = [];\n\nif (process.env.NODE_ENV === 'development') {\n    const devTools = window.__REDUX_DEVTOOLS_EXTENSION__;\n    if (typeof devTools === 'function') {\n        enhancers.push(devTools())\n    }\n}\n\nconst sagaMiddleware = createSagaMiddleware();\nconst composedEnhancers = compose(applyMiddleware(sagaMiddleware), ...enhancers);\n\nconst store = createStore(MainReducer, composedEnhancers);\n\nsagaMiddleware.run(mainSaga);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './saga/index'\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}